/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.33.0
 * Product:       svm4x
 * Model-Version: 2.0.2
 */

#include "sensirion_common.h"
#include "sensirion_shdlc.h"
#include "sensirion_test_setup.h"
#include "sensirion_uart_hal.h"
#include "svm4x_uart.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_uart_hal_sleep_usec

void print_byte_array(uint8_t* array, uint16_t len) {
    uint16_t i = 0;
    printf("0x");
    for (; i < len; i++) {
        printf("%02x", array[i]);
    }
}

TEST_GROUP (SVM4X_Tests) {
    void setup() {
        int16_t error;
        error = sensirion_uart_hal_init(SERIAL_0);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_uart_hal_init");
    }

    void teardown() {
        int16_t error;
        error = sensirion_uart_hal_free();
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_uart_hal_free");
    }
};

TEST (SVM4X_Tests, test_get_serial_number1) {
    int16_t local_error = 0;
    int8_t serial_number[32] = {0};
    local_error = svm4x_get_serial_number(serial_number, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_serial_number");
    printf("serial_number: %s\n", serial_number);
}

TEST (SVM4X_Tests, test_get_product_type1) {
    int16_t local_error = 0;
    int8_t product_type[32] = {0};
    local_error = svm4x_get_product_type(product_type, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_product_type");
    printf("product_type: %s\n", product_type);
}

TEST (SVM4X_Tests, test_get_product_name1) {
    int16_t local_error = 0;
    int8_t product_name[8] = {0};
    local_error = svm4x_get_product_name(product_name, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_product_name");
    printf("product_name: %s\n", product_name);
}

TEST (SVM4X_Tests, test_get_version1) {
    int16_t local_error = 0;
    uint8_t firmware_major = 0;
    uint8_t firmware_minor = 0;
    bool firmware_debug = false;
    uint8_t hardware_major = 0;
    uint8_t hardware_minor = 0;
    uint8_t protocol_major = 0;
    uint8_t protocol_minor = 0;
    local_error = svm4x_get_version(
        &firmware_major, &firmware_minor, &firmware_debug, &hardware_major,
        &hardware_minor, &protocol_major, &protocol_minor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_version");
    printf("firmware_major: %u ", firmware_major);
    printf("firmware_minor: %u ", firmware_minor);
    printf("firmware_debug: %d ", firmware_debug);
    printf("hardware_major: %u ", hardware_major);
    printf("hardware_minor: %u ", hardware_minor);
    printf("protocol_major: %u ", protocol_major);
    printf("protocol_minor: %u\n", protocol_minor);
}

TEST (SVM4X_Tests, test_device_reset1) {
    int16_t local_error = 0;
    local_error = svm4x_device_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "device_reset");
}

TEST (SVM4X_Tests, test_get_system_up_time1) {
    int16_t local_error = 0;
    uint32_t system_up_time = 0;
    local_error = svm4x_get_system_up_time(&system_up_time);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_system_up_time");
    printf("system_up_time: %u\n", system_up_time);
}

TEST (SVM4X_Tests, test_get_temperature_offset_for_rht_measurements1) {
    int16_t local_error = 0;
    int16_t t_offset = 0;
    local_error = svm4x_get_temperature_offset_for_rht_measurements(&t_offset);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "get_temperature_offset_for_rht_measurements");
    printf("t_offset: %i\n", t_offset);
}

TEST (SVM4X_Tests, test_get_voc_tuning_parameters1) {
    int16_t local_error = 0;
    int16_t voc_index_offset = 0;
    int16_t learning_time_offset_hours = 0;
    int16_t learning_time_gain_hours = 0;
    int16_t gating_max_duration_minutes = 0;
    int16_t std_initial = 0;
    int16_t gain_factor = 0;
    local_error = svm4x_get_voc_tuning_parameters(
        &voc_index_offset, &learning_time_offset_hours,
        &learning_time_gain_hours, &gating_max_duration_minutes, &std_initial,
        &gain_factor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_voc_tuning_parameters");
    printf("voc_index_offset: %i ", voc_index_offset);
    printf("learning_time_offset_hours: %i ", learning_time_offset_hours);
    printf("learning_time_gain_hours: %i ", learning_time_gain_hours);
    printf("gating_max_duration_minutes: %i ", gating_max_duration_minutes);
    printf("std_initial: %i ", std_initial);
    printf("gain_factor: %i\n", gain_factor);
}

TEST (SVM4X_Tests, test_get_nox_tuning_parameters1) {
    int16_t local_error = 0;
    int16_t nox_index_offset = 0;
    int16_t learning_time_offset_hours = 0;
    int16_t learning_time_gain_hours = 0;
    int16_t gating_max_duration_minutes = 0;
    int16_t std_initial = 0;
    int16_t gain_factor = 0;
    local_error = svm4x_get_nox_tuning_parameters(
        &nox_index_offset, &learning_time_offset_hours,
        &learning_time_gain_hours, &gating_max_duration_minutes, &std_initial,
        &gain_factor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_nox_tuning_parameters");
    printf("nox_index_offset: %i ", nox_index_offset);
    printf("learning_time_offset_hours: %i ", learning_time_offset_hours);
    printf("learning_time_gain_hours: %i ", learning_time_gain_hours);
    printf("gating_max_duration_minutes: %i ", gating_max_duration_minutes);
    printf("std_initial: %i ", std_initial);
    printf("gain_factor: %i\n", gain_factor);
}

TEST (SVM4X_Tests, test_store_nv_data1) {
    int16_t local_error = 0;
    local_error = svm4x_store_nv_data();
    CHECK_EQUAL_ZERO_TEXT(local_error, "store_nv_data");
}

TEST (SVM4X_Tests, test_set_temperature_offset_for_rht_measurements1) {
    int16_t local_error = 0;
    local_error = svm4x_set_temperature_offset_for_rht_measurements(0);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "set_temperature_offset_for_rht_measurements");
}

TEST (SVM4X_Tests, test_set_voc_tuning_parameters1) {
    int16_t local_error = 0;
    local_error = svm4x_set_voc_tuning_parameters(100, 12, 12, 180, 50, 230);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_voc_tuning_parameters");
}

TEST (SVM4X_Tests, test_set_nox_tuning_parameters1) {
    int16_t local_error = 0;
    local_error = svm4x_set_nox_tuning_parameters(1, 12, 12, 720, 50, 230);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_nox_tuning_parameters");
}

TEST (SVM4X_Tests, test_set_voc_state1) {
    int16_t local_error = 0;
    local_error = svm4x_set_voc_state((int32_t[8]){0, 0, 0, 0, 0, 0, 0, 0}, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_voc_state");
}

TEST (SVM4X_Tests, test_start_measurement1) {
    int16_t local_error = 0;
    int16_t humidity = 0;
    int16_t temperature = 0;
    int16_t voc_index = 0;
    int16_t nox_index = 0;
    int16_t raw_humidity = 0;
    int16_t raw_temperature = 0;
    uint16_t raw_voc_ticks = 0;
    uint16_t raw_nox_ticks = 0;
    int16_t t_offset = 0;
    int16_t voc_index_offset = 0;
    int16_t learning_time_offset_hours = 0;
    int16_t learning_time_gain_hours = 0;
    int16_t gating_max_duration_minutes = 0;
    int16_t std_initial = 0;
    int16_t gain_factor = 0;
    int16_t nox_index_offset = 0;
    uint8_t state[8] = {0};
    uint8_t firmware_major = 0;
    uint8_t firmware_minor = 0;
    bool firmware_debug = false;
    uint8_t hardware_major = 0;
    uint8_t hardware_minor = 0;
    uint8_t protocol_major = 0;
    uint8_t protocol_minor = 0;
    local_error = svm4x_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_measurement");
    local_error = svm4x_read_measured_values_as_integers(
        &humidity, &temperature, &voc_index, &nox_index);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measured_values_as_integers");
    printf("humidity: %i ", humidity);
    printf("temperature: %i ", temperature);
    printf("voc_index: %i ", voc_index);
    printf("nox_index: %i\n", nox_index);
    local_error = svm4x_read_measured_raw_values(
        &raw_humidity, &raw_temperature, &raw_voc_ticks, &raw_nox_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measured_raw_values");
    printf("raw_humidity: %i ", raw_humidity);
    printf("raw_temperature: %i ", raw_temperature);
    printf("raw_voc_ticks: %u ", raw_voc_ticks);
    printf("raw_nox_ticks: %u\n", raw_nox_ticks);
    local_error = svm4x_get_temperature_offset_for_rht_measurements(&t_offset);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "get_temperature_offset_for_rht_measurements");
    printf("t_offset: %i\n", t_offset);
    local_error = svm4x_get_voc_tuning_parameters(
        &voc_index_offset, &learning_time_offset_hours,
        &learning_time_gain_hours, &gating_max_duration_minutes, &std_initial,
        &gain_factor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_voc_tuning_parameters");
    printf("voc_index_offset: %i ", voc_index_offset);
    printf("learning_time_offset_hours: %i ", learning_time_offset_hours);
    printf("learning_time_gain_hours: %i ", learning_time_gain_hours);
    printf("gating_max_duration_minutes: %i ", gating_max_duration_minutes);
    printf("std_initial: %i ", std_initial);
    printf("gain_factor: %i\n", gain_factor);
    local_error = svm4x_get_nox_tuning_parameters(
        &nox_index_offset, &learning_time_offset_hours,
        &learning_time_gain_hours, &gating_max_duration_minutes, &std_initial,
        &gain_factor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_nox_tuning_parameters");
    printf("nox_index_offset: %i ", nox_index_offset);
    printf("learning_time_offset_hours: %i ", learning_time_offset_hours);
    printf("learning_time_gain_hours: %i ", learning_time_gain_hours);
    printf("gating_max_duration_minutes: %i ", gating_max_duration_minutes);
    printf("std_initial: %i ", std_initial);
    printf("gain_factor: %i\n", gain_factor);
    local_error = svm4x_get_voc_state(state, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_voc_state");
    printf("state: ");
    print_byte_array(state, 8);
    printf("\n");
    local_error = svm4x_get_version(
        &firmware_major, &firmware_minor, &firmware_debug, &hardware_major,
        &hardware_minor, &protocol_major, &protocol_minor);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_version");
    printf("firmware_major: %u ", firmware_major);
    printf("firmware_minor: %u ", firmware_minor);
    printf("firmware_debug: %d ", firmware_debug);
    printf("hardware_major: %u ", hardware_major);
    printf("hardware_minor: %u ", hardware_minor);
    printf("protocol_major: %u ", protocol_major);
    printf("protocol_minor: %u\n", protocol_minor);
    local_error = svm4x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}
